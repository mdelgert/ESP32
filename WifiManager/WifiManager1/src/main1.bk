/*
#include <WiFiManager.h> // https://github.com/tzapu/WiFiManager

void setup()
{
    // WiFi.mode(WIFI_STA); // explicitly set mode, esp defaults to STA+AP
    // WiFi.mode(WIFI_AP_STA);

    // it is a good practice to make sure your code sets wifi mode how you want it.

    // put your setup code here, to run once:
    Serial.begin(115200);

    // Add custom CSS for styling
    const char *customCSS = R"(
    <style>
        button, input[type='button'], input[type='submit'] {
            cursor: pointer;
            border: 0;
            background-color: #454242;
            color: #fffefe;
            line-height: 2.4rem;
            font-size: 1.2rem;
            width: 100%;
        }

        button.D {
            background-color: #690400;
        }
    </style>
    )";

    // WiFiManager, Local intialization. Once its business is done, there is no need to keep it around
    WiFiManager wm;

    // Add the CSS to the WiFiManager portal
    wm.setCustomHeadElement(customCSS);

    // You can customize certain elements of the default template with some builtin classes
    wm.setClass("invert"); // dark theme

    // Start the configuration portal
    wm.setConfigPortalTimeout(0); // 0 means the portal will remain active indefinitely

    // The WiFiManager library includes a DNS server that intercepts requests and redirects users to http://192.168.4.1/. This is enabled by default.
    // wm.setCaptivePortalEnable(true); // Ensure captive portal is enabled

    // reset settings - wipe stored credentials for testing
    // these are stored by the esp library
    // wm.resetSettings();

    // Automatically connect using saved credentials,
    // if connection fails, it starts an access point with the specified name ( "AutoConnectAP"),
    // if empty will auto generate SSID, if password is blank it will be anonymous AP (wm.autoConnect())
    // then goes into a blocking loop awaiting configuration and will return success result

    bool res;
    // res = wm.autoConnect(); // auto generated AP name from chipid
    res = wm.autoConnect("PassTxtAP"); // anonymous ap
    // res = wm.autoConnect("AutoConnectAP1","password"); // password protected ap

    if (!res)
    {
        Serial.println("Failed to connect");
        // ESP.restart();
    }
    else
    {
        // if you get here you have connected to the WiFi
        Serial.println("Connected!)");
    }
}

void loop()
{
    // put your main code here, to run repeatedly:
    Serial.println("Local IP: " + WiFi.localIP().toString());
    delay(1000);
}
*/